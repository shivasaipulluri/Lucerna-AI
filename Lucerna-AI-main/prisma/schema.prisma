// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
 provider = "prisma-client-js"
 binaryTargets = ["native", "rhel-openssl-3.0.x"]
 output   = "../primary-client"
 engineType      = "binary"            // ðŸ’¥ Add this line

}

datasource db {
 provider  = "postgresql"
 url       = env("DATABASE_URL")
 directUrl = env("DIRECT_URL")
}

model User {
 id                             String                @id @default(uuid())
 email                          String                @unique
 is_premium                     Boolean               @default(false)
 tailoring_mode                 String?
 created_at                     DateTime              @default(now())
 full_name                      String?
 phone                          String?
 country                        String?
 linkedin                       String?
 company                        String?               // Add this field
 position                       String?               // Add this field
 education                      String?               // Add this field
 skills                         String?               // Add this field
 bio                            String?               // Add this field
 // Subscription and usage tracking fields
 subscription_tier              String?
 subscription_end_date          DateTime?
 daily_basic_tailorings_used    Int                   @default(0)
 daily_personalized_tailorings_used Int               @default(0)
 daily_cover_letters_used       Int                   @default(0)
 daily_linkedin_optimizations_used Int                @default(0)
 daily_interview_sessions_used  Int                   @default(0)
 daily_reset_date               DateTime?
 resumes                        Resume[]
 coverLetters                   CoverLetter[]
 linkedinOptimizations          LinkedinOptimization[]
 savedResumes                   SavedResume[]
 tailoringAnalytics             TailoringAnalytics[]
 interviewSettings InterviewSettings[]

 @@map("users")
}

model Resume {
 id                  String                @id @default(uuid())
 user_id             String
 resume_text         String
 job_description     String
 modified_resume     String?
 ats_score           Int?
 jd_score            Int?
 version             Int                   @default(1)
 tailoring_mode      String?
 created_at          DateTime              @default(now())
 user                User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
 coverLetters        CoverLetter[]
 linkedinOptimizations LinkedinOptimization[]
 savedResumes        SavedResume[]
 tailoringAnalytics  TailoringAnalytics[]  // Add this line to create the relation

 @@map("resumes")
}

model CoverLetter {
 id                String   @id @default(uuid())
 user_id           String
 original_resume_id String
 job_description   String
 generated_letter  String
 explanation       String?
 score             Int?
 feedback          String?
 golden_passed     Boolean?
 tailoring_mode    String
 version           Int      @default(1)
 created_at        DateTime @default(now())
 user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
 resume            Resume   @relation(fields: [original_resume_id], references: [id], onDelete: Cascade)

 @@map("cover_letters")
}

model LinkedinOptimization {
 id              String   @id @default(uuid())
 user_id         String
 resume_id       String
 original_text   String
 goal            String
 industry        String
 tone            String
 generated_text  String
 job_description String
 tailoring_mode  String
 created_at      DateTime @default(now())
 user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
 resume          Resume   @relation(fields: [resume_id], references: [id], onDelete: Cascade)

 @@map("linkedin_optimizations")
}

model SavedResume {
 id            String   @id @default(uuid())
 user_id       String
 resume_id     String
 label         String?   // Optional label for user to identify the saved resume
 created_at    DateTime @default(now())

 user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
 resume        Resume   @relation(fields: [resume_id], references: [id], onDelete: Cascade)

 @@map("saved_resumes")
}

model TailoringAnalytics {
 id              String   @id @default(uuid())
 user_id         String
 resume_id       String
 tailoring_mode  String
 iterations      Int
 ats_score       Int
 jd_score        Int
 golden_passed   Boolean
 created_at      DateTime @default(now())
 user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
 resume          Resume   @relation(fields: [resume_id], references: [id], onDelete: Cascade)

 @@map("tailoring_analytics")
}

model InterviewSettings {
 id              String   @id @default(uuid())
 user_id         String
 job_title       String
 job_description String
 difficulty      String
 mode            String
 created_at      DateTime @default(now())
 updated_at      DateTime @default(now()) @updatedAt
 user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

 @@map("interview_settings")
}
