/**
 * Golden Rules for Resume Optimization
 *
 * This module uses AI to check if a resume follows essential best practices for job applications.
 * It analyzes the resume against the job description and provides feedback and suggestions.
 */

import { generateContent } from "@/lib/ai"

export interface GoldenRulesResult {
  passed: boolean
  feedback: string[]
  suggestions: string[]
}

/**
 * Checks if a resume follows the golden rules of resume optimization using AI
 * @param resume The resume text to check
 * @param jobDescription The job description to compare against
 * @returns Object containing pass/fail status, feedback, and suggestions
 */
export async function checkGoldenRules(resume: string, jobDescription: string): Promise<GoldenRulesResult> {
  try {
    console.log("🔍 Starting Golden Rules check")

    const prompt = `
You are a strict AI resume evaluator tasked with enforcing the Golden Rules for resume quality.

You must review the resume below against the provided job description and return a JSON with this structure:
{
"passed": boolean,
"feedback": [string],
"suggestions": [string]
}

Your evaluation must judge the following:
1. Does the resume address at least 3 key responsibilities from the job description, with evidence?
2. Are strong original phrases preserved, or have they been replaced by robotic or generic phrasing?
3. Does the resume reflect human emotion, intentionality, and believable voice?
4. Is there a storytelling arc (achievement-driven, impact-focused) in the experience section?
5. Are there any grammatical or structural issues?
6. Is the resume realistic? No exaggerations or obviously fake claims?
7. Does it sound like it was written by the **same person** who wrote the original resume?
8. Does the resume exclude any AI-generated metadata, summaries, or markdown-style comments?

Important:
- Do not include explanations, summaries, or reflections in the resume.
- Only analyze the resume content — ignore any trailing LLM-generated descriptions.
- Return "passed: false" if you detect any AI artifacts like "This resume is..." or "Generated by..." text.

Return "passed: false" if **any** rule fails, even slightly.

Use deep reasoning. This platform serves **real users**, and the quality must be uncompromising.

Resume:
"""${resume}"""

Job Description:
"""${jobDescription}"""
`

    try {
      // Use our enhanced generateContent function with cascading fallback
      const { success, text, provider } = await generateContent(
        "dummy-key", // This is ignored now as we check env vars directly
        prompt,
        "gemini-1.5-flash",
        0.3, // Lower temperature for more consistent results
      )

      console.log("🧠 Raw AI response for golden rules:", text)

      if (!success || !text) {
        console.error("❌ AI content generation failed completely")
        return fallbackGoldenRulesCheck(resume, jobDescription)
      }

      console.log(`✅ Golden Rules check completed successfully using ${provider} provider`)

      // Parse the response
      let parsedResult: GoldenRulesResult | null = null
      try {
        // Try to find a JSON object in the text
        const jsonMatch = text.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          parsedResult = JSON.parse(jsonMatch[0])
        } else {
          // If no JSON object is found, try to clean up the text and parse it
          const cleanedText = text
            .replace(/```json\s+/g, "")
            .replace(/```/g, "")
            .trim()
          parsedResult = JSON.parse(cleanedText)
        }

        console.log("✅ Parsed result:", parsedResult)
      } catch (parseError) {
        console.error("❌ Failed to parse AI response for golden rules:", parseError, "Raw response:", text)
        return fallbackGoldenRulesCheck(resume, jobDescription)
      }

      if (
        !parsedResult ||
        typeof parsedResult.passed !== "boolean" ||
        !Array.isArray(parsedResult.feedback) ||
        !Array.isArray(parsedResult.suggestions)
      ) {
        console.error("❌ Invalid AI response format for golden rules:", parsedResult)
        return fallbackGoldenRulesCheck(resume, jobDescription)
      }

      return parsedResult
    } catch (aiSdkError) {
      console.error("❌ Error using AI for golden rules check:", aiSdkError)
      return fallbackGoldenRulesCheck(resume, jobDescription)
    }
  } catch (err) {
    console.error("❌ Error checking golden rules with AI:", err)
    return fallbackGoldenRulesCheck(resume, jobDescription)
  }
}

/**
 * Fallback function for when AI-based golden rules check fails
 * Uses basic heuristics to check resume quality
 */
function fallbackGoldenRulesCheck(resume: string, jobDescription: string): GoldenRulesResult {
  console.log("⚠️ Using fallback golden rules check")

  const result: GoldenRulesResult = {
    passed: true,
    feedback: [],
    suggestions: [],
  }

  // Basic length check
  const wordCount = resume.split(/\s+/).filter((word) => word.length > 0).length
  if (wordCount < 300) {
    result.passed = false
    result.feedback.push("Resume is too short")
    result.suggestions.push("Expand your resume with more detailed descriptions of your experience and skills")
  } else if (wordCount > 1200) {
    result.passed = false
    result.feedback.push("Resume is too long")
    result.suggestions.push("Consider condensing your resume to focus on the most relevant experience")
  }

  // Check for contact information
  const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/
  if (!emailPattern.test(resume)) {
    result.passed = false
    result.feedback.push("Missing email address")
    result.suggestions.push("Include your email address in the contact information")
  }

  // Check for basic sections
  const sections = ["experience", "education", "skills"]
  const missingSections = sections.filter((section) => !resume.toLowerCase().includes(section))

  if (missingSections.length > 0) {
    result.passed = false
    result.feedback.push(`Missing important sections: ${missingSections.join(", ")}`)
    result.suggestions.push(`Add the following sections to your resume: ${missingSections.join(", ")}`)
  }

  // Always pass in fallback mode if no issues found
  return result
}
